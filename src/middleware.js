import _ from 'lodash';
import { BASE_TYPE } from './lib/constants';

/**
 * Creates an instance of middleware necessary to handle dispatched async actions created with
 * {@link createAsyncAction}.
 * @param  {object} options middleware options
 * @param  {string} [options.actionType="REDUX_SIMPLE_ASYNC_BASE_TYPE"] the action type the
 * middleware will listen for. You most likely don't want to modify this unless for some reason
 * you want multiple instances of async middleware.
 * @param {object} [options.requestOptions] options to passed as the second argument to
 * `makeRequest`
 * @return {function} redux middleware for handling async actions
 * @example
 * import { createAsyncMiddleware } from 'redux-easy-async';
 * const asyncMiddleware = createAsyncMiddleware();
 *
 * ...
 *
 * // Now add to your middlewares whereever your store is created.
 * // Typically this looks something like:
 * // const middlewares = [asyncMiddleware]
 */
export const createAsyncMiddleware = (options) => {
  const {
    actionType = BASE_TYPE,
    requestOptions,
  } = options;

  // Return Redux middleware
  return ({ dispatch, getState }) => next => (action) => {
    // Normal action: pass it on
    if (action.type !== actionType) return next(action);

    // configuration option defaults
    const {
      // actions to be dispatched before and on success/fail for request
      // generally auto-generated by createAsyncAction()
      startActionCreator,
      successActionCreator,
      failActionCreator,
      // generally auto-generated from createAsyncAction()
      actionName,
      // function that makes the actual request. Must return a promise.
      makeRequest,
      // additional meta that will be passed to the action if any - must be an object
      meta = {},
      // function that returns boolean for whether to proceed with the request.
      shouldMakeRequest = () => true,
      // on start the result of parse() is passed as the payload of the start action
      // This is useful for propagating params down
      parseStart = () => null,
      // on success the result of parse() is passed as the payload of the success action
      parseSuccess = resp => resp,
      // on fail the result of parseFail() is passed as the payload of the fail action
      parseFail = resp => resp,
    } = action;


    if (!shouldMakeRequest(getState())) return false;

    dispatch(startActionCreator({
      payload: parseStart(),
      meta: {
        ...meta,
        actionName,
        asyncType: 'start',
      },
    }));

    const startTime = Date.now();

    const req = makeRequest(getState(), requestOptions);

    if (_.get(req, 'then') && typeof _.get(req, 'then') !== 'function') {
      throw new Error(`makeRequest() for action: "${actionName}" must return a promise.`);
    }

    req.then(
      resp => dispatch(successActionCreator({
        payload: parseSuccess(resp),
          // pass the response and actionName as part of the meta
        meta: {
          ...meta,
          resp,
          actionName,
          asyncType: 'success',
          requestTime: Date.now() - startTime,
        },
      })),
      resp => dispatch(failActionCreator({
        payload: parseFail(resp),
          // pass the response and actionName as part of the meta
        meta: {
          ...meta,
          resp,
          actionName,
          asyncType: 'fail',
          requestTime: Date.now() - startTime,
        },
      })),
      );
    return req;
  };
};
